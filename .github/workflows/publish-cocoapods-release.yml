name: iOS starter workflow

on: workflow_dispatch
# on: 
#   push:
#     branches:
#       - master

jobs:
  job_build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
          pod install --repo-update
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
  
  job_publish:
    name: publish
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      # 暂时屏蔽 会卡在这一步骤
      # - name: Cache .cocoapods
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.cocoapods
      #     key: ${{ runner.os }}-cocoapods
      #     restore-keys: ${{ runner.os }}-cocoapods

      - name: init oss
        run: |
          echo "[Credentials]" > ~/.ossutilconfig
          echo "language=CH" >> ~/.ossutilconfig
          echo "endpoint=${{ secrets.OSS_ENDPOINT }}" >> ~/.ossutilconfig
          echo "accessKeyID=${{ secrets.OSS_ACCESS_KEY_ID }}" >> ~/.ossutilconfig
          echo "accessKeySecret=${{ secrets.OSS_ACCESS_KEY_SECRET }}" >> ~/.ossutilconfig
          curl -o ./Yodo1MasSdk/ssutilmac64 http://gosspublic.alicdn.com/ossutil/1.7.3/ossutilmac64
          chmod 755 ./Yodo1MasSdk/ossutilmac64

      - name: chmod publish
        run: |
          chmod 755 ./Yodo1MasSdk/publish.sh
          chmod 755 ./Yodo1MasSdk/publish.sh

      - name: publish
        run: sh Yodo1MasSdk/publish.sh Release ${{ secrets.TOKEN }} ${{ secrets.TING_TOKEN }}